{"version":3,"sources":["metronome.mp3","serviceWorker.js","Metronome.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Metronome","props","state","bpm","handleChange","bind","handleStart","handlePause","this","setState","document","getElementsByClassName","load","click","play","playbackRate","loop","className","maxValue","minValue","value","onChange","onClick","src","metro","React","Component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,uC,+JCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2FC0CSC,E,YApDf,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAM,CACPC,IAAK,KAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAPJ,E,0EAULF,GACVK,KAAKC,SAAS,CAACN,QACDO,SAASC,uBAAuB,YAAY,GACpDC,S,oCAMF,IAAMC,EAAQH,SAASC,uBAAuB,YAAY,GAC1DE,EAAMC,OACVD,EAAME,aAAaP,KAAKN,MAAMC,IAAI,IAClCU,EAAMG,MAAK,I,oCAKGN,SAASC,uBAAuB,YAAY,GACpDC,S,+BAII,IAAD,OACL,OACI,yBAAKK,UAAU,aACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,YAAYT,KAAKN,MAAMC,IAAtC,QACA,yBAAKc,UAAU,eACf,kBAAC,IAAD,CAAaC,SAAU,IAAKC,SAAU,GAAIC,MAAOZ,KAAKN,MAAMC,IAChDkB,SAAUb,KAAKJ,iBAI/B,4BAASa,UAAU,eAAeK,QAAS,kBAAI,EAAKhB,gBAApD,SACA,4BAASW,UAAU,eAAeK,QAAS,kBAAI,EAAKf,gBAApD,QACA,2BAAOU,UAAU,YACb,4BAAQM,IAAKC,Y,GA/CTC,IAAMC,WCI9BC,IAASC,OAAO,kBAAC,EAAD,MAAelB,SAASmB,eAAe,SFwHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.abce0788.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/metronome.9db71d16.mp3\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Metronome.css';\r\nimport metro from './metronome.mp3'\r\nimport InputRange from \"react-input-range\";\r\n\r\n\r\n\r\nclass Metronome extends React.Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state={\r\n        bpm: 120\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleStart = this.handleStart.bind(this)\r\n    this.handlePause = this.handlePause.bind(this)\r\n}\r\n\r\nhandleChange (bpm) {\r\n    this.setState({bpm})\r\n    const click = document.getElementsByClassName(\"audio-el\")[0]\r\n    click.load()            //Stops the metronome when user changes bpm\r\n}\r\n\r\n\r\n\r\nhandleStart() {\r\n        const click = document.getElementsByClassName(\"audio-el\")[0]\r\n        click.play()\r\n    click.playbackRate=this.state.bpm/110    //time stretching the metronome track\r\n    click.loop=true    //looping the metronome track\r\n}\r\n\r\n\r\n    handlePause() {\r\n    const click = document.getElementsByClassName(\"audio-el\")[0]\r\n    click.load()\r\n}\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"metronome\">\r\n                <div className=\"bpm-slider\">\r\n                    <div className=\"bpm-text\">{this.state.bpm} BPM</div>\r\n                    <div className=\"input-range\">\r\n                    <InputRange  maxValue={240} minValue={40} value={this.state.bpm}\r\n                                onChange={this.handleChange}\r\n                                    />\r\n                </div>\r\n                </div>\r\n                <button  className=\"start-button\" onClick={()=>this.handleStart()}>Start</button>\r\n                <button  className=\"pause-button\" onClick={()=>this.handlePause()}>Stop</button>\r\n                <audio className=\"audio-el\">\r\n                    <source src={metro}></source>\r\n                </audio>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Metronome","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Metronome from './Metronome'\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(<Metronome />, document.getElementById('root'));\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}